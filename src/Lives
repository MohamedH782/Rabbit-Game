int lives=4;
private boolean gameStarted = false;


public void display(GLAutoDrawable glAutoDrawable) {
        GL gl = glAutoDrawable.getGL();
        gl.glClear(GL.GL_COLOR_BUFFER_BIT);       //Clear The Screen And The Depth Buffer
        gl.glLoadIdentity();

//        DrawBackground(gl);

        if (lives > 0) {
            // Render the game elements when lives are greater than 0
            DrawBackground(gl);
            drawScore(gl);
            DrawTimer(gl);
            drawLives(gl);
            if (easy && levels) {
                //first row
                DrawSprite(gl, x - 30, y, 2, 2);
                DrawSprite(gl, x, y, 2, 2);
                DrawSprite(gl, x + 30, y, 2, 2);

                //second row
                DrawSprite(gl, x - 30, y - 15, 2, 2);
                DrawSprite(gl, x, y - 15, 2, 2);
                DrawSprite(gl, x + 30, y - 15, 2, 2);

                //third row
                DrawSprite(gl, x - 30, y - 30, 2, 2);
                DrawSprite(gl, x, y - 30, 2, 2);
                DrawSprite(gl, x + 30, y - 30, 2, 2);
                animationIndex = animationIndex % 4;
                GenerateRabbit();
                DrawRabbit(gl);

                DrawHammer(gl);
                if (xclicked >= xpos - 5 && xclicked <= xpos + 10) {
                    if (yclicked >= ypos - 10 && yclicked <= ypos + 16) {
                        DrawBackground(gl);

                        //first row
                        DrawSprite(gl, x - 30, y, 2, 2);
                        DrawSprite(gl, x, y, 2, 2);
                        DrawSprite(gl, x + 30, y, 2, 2);

                        //second row
                        DrawSprite(gl, x - 30, y - 15, 2, 2);
                        DrawSprite(gl, x, y - 15, 2, 2);
                        DrawSprite(gl, x + 30, y - 15, 2, 2);

                        //third row
                        DrawSprite(gl, x - 30, y - 30, 2, 2);
                        DrawSprite(gl, x, y - 30, 2, 2);
                        DrawSprite(gl, x + 30, y - 30, 2, 2);

                        DrawSprite(gl, xpos, ypos, 3, 2);
                        xclicked = 200;
                        yclicked = 200;
                        score++;
                    }

                }
                drawScore(gl);
                DrawTimer(gl);
                drawLives(gl);
            } //start menu
            else if (levels && back == false) {
                DrawBackground2(gl);
                DrawLevels(gl, x, y);
                DrawSound(gl, x, y, 8);
            } else if (back && levels) {
                DrawBackground2(gl);
                DrawPlay(gl, x, y, 6);
                DrawHowToPlay(gl, x, y, 15);
                DrawExit(gl, x, y, 7);
                DrawSound(gl, x, y, 8);
                back = false;
                levels = false;
            } else {
                DrawBackground2(gl);

                DrawPlay(gl, x, y, 6);
                DrawExit(gl, x, y, 7);
                DrawHowToPlay(gl, x, y, 15);
                DrawSound(gl, x, y, 8);
            }
            // ... (other game rendering code)

        } else {
            // Render game over message when lives are 0
            DrawGameOverMessage(gl);
        }

    }
void handleMousePressed() {
        if (xclicked >= 88 && xclicked <= 95 && yclicked <= 96 && yclicked >= 90) {
            changeState = true;
        } else if (xclicked >= 38 && xclicked <= 60 && yclicked <= 77 && yclicked >= 65 && levels == false) {
            levels = true;
            System.out.println("play");

            // Set the gameStarted flag to true only when the game starts

        } else if (xclicked >= 4 && xclicked <= 10 && yclicked <= 96 && yclicked >= 90) {
            back = true;
        } else if (xclicked >= 38 && xclicked <= 60 && yclicked <= 77 && yclicked >= 65 && levels ) {
            // Decrement lives only when the game has started
            easy = true;
            gameStarted=true;
        }

    }

    public void mouseClicked(MouseEvent e) {
        double x = e.getX();
        double y = e.getY();

        Component c = e.getComponent();
        double width = c.getWidth();
        double height = c.getHeight();

        xclicked = (int) ((x / width) * 100);
        yclicked = ((int) ((y / height) * 100));
//reversing direction of y axis
        yclicked = 100 - yclicked;
        mouseClick = true;
        System.out.println(xclicked + "  " + yclicked);
        handleMousePressed();
        if (gameStarted && !(xclicked >= xpos - 5 && xclicked <= xpos + 10 && yclicked >= ypos - 10 && yclicked <= ypos + 16)) {
            lives--;
        }

    }
 private void DrawGameOverMessage(GL gl) {
        // Set color and size for the game over message

    }
